<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
        }

        .container {
            max-width: 900px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            padding: 40px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 2px solid #f0f0f0;
        }

        .header h1 {
            color: #333;
            margin: 0 0 10px 0;
            font-size: 2.2em;
        }

        .header p {
            color: #666;
            margin: 0;
            font-size: 1.1em;
        }

        .member-profile {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 40px;
        }

        @media (max-width: 768px) {
            .member-profile {
                grid-template-columns: 1fr;
                gap: 20px;
            }
        }

        .profile-card {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            border-left: 5px solid #667eea;
        }

        .profile-card h3 {
            margin: 0 0 20px 0;
            color: #333;
            font-size: 1.3em;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #dee2e6;
        }

        .info-item:last-child {
            border-bottom: none;
        }

        .info-label {
            font-weight: 600;
            color: #666;
            flex: 1;
        }

        .info-value {
            color: #333;
            font-weight: 500;
            flex: 2;
            text-align: right;
        }

        .role-badge {
            display: inline-block;
            padding: 6px 16px;
            border-radius: 25px;
            font-size: 0.85em;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .role-badge.admin {
            background: #e74c3c;
            color: white;
        }

        .role-badge.member {
            background: #3498db;
            color: white;
        }

        .status-badge {
            display: inline-block;
            padding: 6px 16px;
            border-radius: 25px;
            font-size: 0.85em;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-badge.active {
            background: #27ae60;
            color: white;
        }

        .status-badge.inactive {
            background: #95a5a6;
            color: white;
        }

        .activity-section {
            margin-bottom: 40px;
        }

        .section-title {
            color: #333;
            margin: 0 0 25px 0;
            font-size: 1.4em;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .activity-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
        }

        .stat-value {
            font-size: 2.5em;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9em;
            opacity: 0.9;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .recent-activity {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            min-height: 150px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            font-style: italic;
        }

        .actions {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
            margin-bottom: 30px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .back-link {
            text-align: center;
            margin-top: 30px;
        }

        .back-link a {
            color: #667eea;
            text-decoration: none;
            font-weight: 600;
            font-size: 1.1em;
        }

        .back-link a:hover {
            text-decoration: underline;
        }

        .alert {
            padding: 15px 20px;
            border-radius: 8px;
            margin-bottom: 25px;
            font-weight: 500;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        /* Delete Confirmation Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            animation: fadeIn 0.3s ease-out;
        }

        .modal-content {
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            animation: slideIn 0.3s ease-out;
        }

        .modal-header {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            color: white;
            padding: 20px 30px;
            border-radius: 15px 15px 0 0;
        }

        .modal-header h3 {
            margin: 0;
            font-size: 1.4em;
            font-weight: 600;
        }

        .modal-body {
            padding: 30px;
        }

        .modal-body p {
            margin-bottom: 20px;
            color: #333;
            line-height: 1.6;
        }

        .warning-text {
            color: #dc3545;
            font-weight: 600;
            margin-bottom: 15px !important;
        }

        .warning-list {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 15px 20px;
            margin: 15px 0;
            color: #856404;
        }

        .warning-list li {
            margin-bottom: 8px;
        }

        .modal-footer {
            padding: 20px 30px 30px;
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            flex-wrap: wrap;
        }

        .modal-footer .btn {
            min-width: 120px;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from { 
                opacity: 0;
                transform: translateY(-20px) scale(0.95);
            }
            to { 
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>👤 Member Details</h1>
            <p>Complete member profile and activity overview</p>
        </div>

        <% if (message) { %>
            <div class="alert alert-success">
                <%= message %>
            </div>
            <% } %>

                <% if (error) { %>
                    <div class="alert alert-error">
                        <%= error %>
                    </div>
                    <% } %>

                        <div class="member-profile">
                            <div class="profile-card">
                                <h3>📋 Basic Information</h3>
                                <div class="info-item">
                                    <span class="info-label">Member ID:</span>
                                    <span class="info-value">#<%= memberDetails.MemberID %></span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Full Name:</span>
                                    <span class="info-value">
                                        <%= memberDetails.Name %>
                                    </span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Email:</span>
                                    <span class="info-value">
                                        <%= memberDetails.Email %>
                                    </span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Account Role:</span>
                                    <span class="info-value">
                                        <span class="role-badge <%= memberDetails.Role %>">
                                            <%= memberDetails.Role %>
                                        </span>
                                    </span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Status:</span>
                                    <span class="info-value">
                                        <span class="status-badge active">Active</span>
                                    </span>
                                </div>
                            </div>

                            <div class="profile-card">
                                <h3>📅 Account Timeline</h3>
                                <div class="info-item">
                                    <span class="info-label">Member Since:</span>
                                    <span class="info-value">
                                        <%= new Date(memberDetails.CreatedAt).toLocaleDateString('en-US', { year: 'numeric' ,
                                            month: 'long' , day: 'numeric' }) %>
                                    </span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Last Updated:</span>
                                    <span class="info-value">
                                        <%= new Date(memberDetails.UpdatedAt).toLocaleDateString('en-US', { year: 'numeric' ,
                                            month: 'long' , day: 'numeric' }) %>
                                    </span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Days Active:</span>
                                    <span class="info-value">
                                        <%= Math.floor((new Date() - new Date(memberDetails.CreatedAt)) / (1000 * 60 * 60 *
                                            24)) %> days
                                    </span>
                                </div>
                                <div class="info-item">
                                    <span class="info-label">Status:</span>
                                    <span class="info-value">
                                        <span class="role-badge <%= memberDetails.Role %>">Active</span>
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div class="activity-section">
                            <h2 class="section-title">📊 Activity Overview</h2>

                            <div class="activity-stats">
                                <div class="stat-card">
                                    <div class="stat-value">0</div>
                                    <div class="stat-label">Books Borrowed</div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-value">0</div>
                                    <div class="stat-label">Currently Borrowed</div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-value">0</div>
                                    <div class="stat-label">Books Returned</div>
                                </div>
                                <div class="stat-card">
                                    <div class="stat-value">0</div>
                                    <div class="stat-label">Overdue Items</div>
                                </div>
                            </div>

                            <div class="recent-activity">
                                📚 Recent borrowing activity will be displayed here once the borrowing system is
                                implemented.
                            </div>
                        </div>

                        <div class="actions">
                            <a href="/members/edit/<%= memberDetails.MemberID %>" class="btn btn-primary">
                                ✏️ Edit Member
                            </a>
                            <button class="btn btn-danger" data-member-id="<%= memberDetails.MemberID %>"
                                data-member-name="<%= memberDetails.Name %>">
                                🗑️ Delete Member
                            </button>
                            <a href="/members" class="btn btn-secondary">
                                📋 Back to List
                            </a>
                        </div>

                        <div class="back-link">
                            <a href="/members">← Back to Member Management</a>
                        </div>
    </div>

    <script>
        // Handle delete confirmation
        document.addEventListener('DOMContentLoaded', function () {
            const deleteButtons = document.querySelectorAll('.btn-danger[data-member-id]');

            deleteButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const memberId = this.getAttribute('data-member-id');
                    const memberName = this.getAttribute('data-member-name');
                    showDeleteConfirmationModal(memberId, memberName);
                });
            });
        });

        function showDeleteConfirmationModal(memberId, memberName) {
            // Create modal HTML
            const modalHTML = `
                <div id="deleteModal" class="modal-overlay">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3>⚠️ Confirm Deletion</h3>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete member <strong>"${memberName}"</strong>?</p>
                            <p class="warning-text">⚠️ This action cannot be undone and will permanently remove:</p>
                            <ul class="warning-list">
                                <li>Member's account and profile</li>
                                <li>All borrowing history</li>
                                <li>Access to the library system</li>
                            </ul>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-danger" onclick="confirmDelete(${memberId})">
                                🗑️ Delete Member
                            </button>
                            <button class="btn btn-secondary" onclick="closeDeleteModal()">
                                ❌ Cancel
                            </button>
                        </div>
                    </div>
                </div>
            `;

            // Add modal to page
            document.body.insertAdjacentHTML('beforeend', modalHTML);
            
            // Show modal
            const modal = document.getElementById('deleteModal');
            modal.style.display = 'flex';
            
            // Close modal when clicking outside of it
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeDeleteModal();
                }
            });
            
            // Close modal with Escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && modal) {
                    closeDeleteModal();
                }
            });
        }

        function closeDeleteModal() {
            const modal = document.getElementById('deleteModal');
            if (modal) {
                // Remove the modal with a fade-out animation
                modal.style.animation = 'fadeOut 0.2s ease-out';
                setTimeout(() => {
                    if (modal && modal.parentNode) {
                        modal.remove();
                    }
                }, 200);
            }
        }

        async function confirmDelete(memberId) {
            const modal = document.getElementById('deleteModal');
            const deleteBtn = modal.querySelector('.btn-danger');
            
            // Show loading state
            deleteBtn.innerHTML = '⏳ Deleting...';
            deleteBtn.disabled = true;

            try {
                const response = await fetch(`/members/delete/${memberId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                // Check if response is JSON
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    // If we get HTML, it means there was a server error or redirect
                    const text = await response.text();
                    throw new Error('Server returned HTML instead of JSON. There may be a server error.');
                }

                const result = await response.json();

                if (response.ok && result.success) {
                    closeDeleteModal();
                    // Redirect back to members list with success message
                    window.location.href = '/members?message=' + encodeURIComponent('Member deleted successfully');
                } else {
                    closeDeleteModal();
                    showErrorMessage('Error: ' + (result.message || 'Unknown error occurred'));
                }
            } catch (error) {
                console.error('Error deleting member:', error);
                closeDeleteModal();
                showErrorMessage('Failed to delete member. Please try again. Error: ' + error.message);
            }
        }

        function showErrorMessage(message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-error';
            alertDiv.innerHTML = message;
            alertDiv.style.backgroundColor = '#f8d7da';
            alertDiv.style.color = '#721c24';
            alertDiv.style.borderColor = '#f5c6cb';
            alertDiv.style.padding = '15px 20px';
            alertDiv.style.borderRadius = '8px';
            alertDiv.style.margin = '20px 0';
            alertDiv.style.fontWeight = '500';
            document.querySelector('.container').prepend(alertDiv);
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                if (alertDiv && alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }
    </script>
</body>

</html>